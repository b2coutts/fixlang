# standard library

#------------------------------- LIST FUNCTIONS -------------------------------#
# get the length of a list
# list -> int
len:    [?1    + .1  0 >1    .0]

# get the nth thing out of a list
# list, index -> value
lref:   [?1    ?2    0 >1  - 2 .1    <1
               error "lref index out of range!"]
                    
# create a range of integers from .1 to .2, excluding .2
# int, int -> list
range:  [?lt 1 2    ,1  0 + 1 .1  2    ;]

# apply a function to each element of a list
# function, list -> list
map:    [?2    ,1 <2  0 1. >2    ;]

# take only the elements of the list whose result when applied to f is true
# function, list -> list
#filter: [?2    ?1 <2    ,<2 0 1. >2    0 1. >2
               #;]

filter: [?2    ?1 <2    ,<2 0 1. >2    0 1. >2
        ;]

# right fold
# function, value, list -> value
foldr:  [?3    1 <3  0 1. 2 >3    2]

# append two lists
# list, list -> list
app:    [foldr cons. 2 1]

# reverse a list
# list -> list
rev:    [foldr [app 2 ,1;] ; 1]

# true iff the given element is in the list
# value, list -> bool
elem:   [?2    ?eq 1 <2    .1    0 1 >2
               .0]
